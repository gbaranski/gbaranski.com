<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>gbaranski</title><link>/</link><description>Recent content on gbaranski</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 17 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>GnuPG &amp; Password manager setup</title><link>/posts/password-managers/</link><pubDate>Mon, 17 May 2021 00:00:00 +0000</pubDate><guid>/posts/password-managers/</guid><description>Introduction I was looking for password manager for quite long time which will meet all following requirements
Open-source CLI/TUI application, mustn&amp;rsquo;t be written in any scripting languauge, I don&amp;rsquo;t want high startup time, I might use password manager in scripts and 0.5s startup time bottleneck is not a way to go. Android &amp;amp; Linux support Option for self-hosting Must be relatively easy to synchronize between multiple computers, must work on Linux and Android.</description><content>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>I was looking for password manager for quite long time which will meet all following requirements&lt;/p>
&lt;ol>
&lt;li>Open-source&lt;/li>
&lt;li>CLI/TUI application, mustn&amp;rsquo;t be written in any scripting languauge, I don&amp;rsquo;t want high startup time, I might use password manager in scripts and 0.5s startup time bottleneck is not a way to go.&lt;/li>
&lt;li>Android &amp;amp; Linux support&lt;/li>
&lt;li>Option for self-hosting&lt;/li>
&lt;li>Must be relatively easy to synchronize between multiple computers, must work on Linux and Android.&lt;/li>
&lt;/ol>
&lt;h2 id="what-ive-tried-so-far">What I&amp;rsquo;ve tried so far&lt;/h2>
&lt;h3 id="bitwarden">Bitwarden&lt;/h3>
&lt;ol>
&lt;li>✅ Open-source, under GNU GPLv2 License.&lt;/li>
&lt;li>❌ There is CLI app, but it&amp;rsquo;s written in JS which makes it horribly slow to stat up, launching &lt;code>bw --help&lt;/code> took 544ms, it&amp;rsquo;s a lot, just for comparsion &lt;a href="https://github.com/gopasspw/gopass">gopass&lt;/a> help page takes 66ms, retrieving specific password takes 200ms, huge difference.&lt;/li>
&lt;li>✅ Android &amp;amp; Linux is fully supported, desktop app is written in Electron, which is slow and enabling Wayland&amp;rsquo;s fractional scaling makes everything blurred.&lt;/li>
&lt;li>✅ Yes, via &lt;a href="https://github.com/dani-garcia/vaultwarden">vaultwarden&lt;/a>.&lt;/li>
&lt;li>✅ Super simple to synchronize, probably easiest from all options I&amp;rsquo;ve mentioned here.&lt;/li>
&lt;/ol>
&lt;h3 id="keepassxc">KeepassXC&lt;/h3>
&lt;ol>
&lt;li>✅ Open-source, under GNU GPLv3 License.&lt;/li>
&lt;li>✅ There is &lt;code>keepassxc-cli&lt;/code>.&lt;/li>
&lt;li>✅ Android is supported by &lt;a href="https://www.keepassdx.com/">KeepassDX&lt;/a>, I personally don&amp;rsquo;t like the UI of app, Linux is supported&lt;/li>
&lt;li>✅ Self-host by storing database on computer.&lt;/li>
&lt;li>❌ Complicated synchronization between Linux and Android.&lt;/li>
&lt;/ol>
&lt;h3 id="gopass">gopass&lt;/h3>
&lt;ol>
&lt;li>✅ Open-source, under MIT License.&lt;/li>
&lt;li>✅ gopass by itself is CLI/TUI Application.&lt;/li>
&lt;li>✅ Android is supported by &lt;a href="https://github.com/android-password-store/Android-Password-Store">Android-Password-Store&lt;/a>, application is very nice, looks best from all mobile applications mentioned here, Linux is supported.&lt;/li>
&lt;li>✅ Self-host by storing Git repo on computer.&lt;/li>
&lt;li>✅ As soon as you get GPG keys working, it&amp;rsquo;s super easy by pushing it to Github&lt;/li>
&lt;/ol>
&lt;h3 id="verdict">Verdict&lt;/h3>
&lt;p>As you can see, gopass meets all of my requirements.&lt;/p>
&lt;p>This post is going to cover&lt;/p>
&lt;ul>
&lt;li>GPG Keys for safe encrypting/decrypting stored keys.&lt;/li>
&lt;li>Git repository to store passwords.&lt;/li>
&lt;li>Synchronizing passwords between Android and Linux.&lt;/li>
&lt;li>Setting up gopass password store.&lt;/li>
&lt;/ul>
&lt;h1 id="prerequisites">Prerequisites&lt;/h1>
&lt;p>&lt;code>GPG_TTY&lt;/code> variable must be set to get GPG working, check if exists by &lt;code>echo $GPG_TTY&lt;/code>, if it&amp;rsquo;s not set &lt;code>GPG_TTY&lt;/code> to output of &lt;code>tty&lt;/code> command.&lt;/p>
&lt;p>Bash/ZSH:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e"># ~/.bashrc or ~/.zshrc&lt;/span>
export GPG_TTY&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>tty&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Fish:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e"># ~/.config/fish/config.fish&lt;/span>
export GPG_TTY&lt;span style="color:#f92672">=(&lt;/span>tty&lt;span style="color:#f92672">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="git-repository">Git repository&lt;/h1>
&lt;p>We need Git repository to store passwords, I store them in Github private repository, although it could be even self-hosted. Keep in mind that password database don&amp;rsquo;t need to be super secure, of course it will be better if it will be, but the password database encrypted with password you&amp;rsquo;ll use in GnuPG.&lt;/p>
&lt;p>Create Github repository using &lt;a href="https://github.com/cli/cli/">Github CLI&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ gh repo create pass
? Visibility Private
? This will create the &lt;span style="color:#e6db74">&amp;#34;pass&amp;#34;&lt;/span> repository on GitHub. Continue? Yes
✓ Created repository gbaranski/pass on GitHub
? Create a local project directory &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#e6db74">&amp;#34;gbaranski/pass&amp;#34;&lt;/span>? No
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="gpg-keys">GPG keys&lt;/h1>
&lt;h2 id="gpg-primary-key">GPG Primary key&lt;/h2>
&lt;p>&lt;em>&lt;strong>If you already have GPG Primary Key that you can use, you can skip this step&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Generate new GPG Key using &lt;code>gpg --full-generate-key --expert&lt;/code>, we&amp;rsquo;re using RSA because I&amp;rsquo;m not sure about ECC keys compatibility.&lt;/p>
&lt;p>The primary key won&amp;rsquo;t be able to encrypt/sign, since we&amp;rsquo;ll have sub-keys for that, primary key will be used only to create new sub-keys.&lt;/p>
&lt;pre>&lt;code class="language-none" data-lang="none">$ gpg --full-generate-key --expert
gpg (GnuPG) 2.2.27; Copyright (C) 2021 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Please select what kind of key you want:
(1) RSA and RSA (default)
(2) DSA and Elgamal
(3) DSA (sign only)
(4) RSA (sign only)
(7) DSA (set your own capabilities)
(8) RSA (set your own capabilities)
(9) ECC and ECC
(10) ECC (sign only)
(11) ECC (set your own capabilities)
(13) Existing key
(14) Existing key from card
Your selection? 8
Possible actions for a RSA key: Sign Certify Encrypt Authenticate
Current allowed actions: Sign Certify Encrypt
(S) Toggle the sign capability
(E) Toggle the encrypt capability
(A) Toggle the authenticate capability
(Q) Finished
Your selection? E
Possible actions for a RSA key: Sign Certify Encrypt Authenticate
Current allowed actions: Sign Certify
(S) Toggle the sign capability
(E) Toggle the encrypt capability
(A) Toggle the authenticate capability
(Q) Finished
Your selection? S
Possible actions for a RSA key: Sign Certify Encrypt Authenticate
Current allowed actions: Certify
(S) Toggle the sign capability
(E) Toggle the encrypt capability
(A) Toggle the authenticate capability
(Q) Finished
Your selection? Q
RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (3072) 4096
Requested keysize is 4096 bits
Please specify how long the key should be valid.
0 = key does not expire
&amp;lt;n&amp;gt; = key expires in n days
&amp;lt;n&amp;gt;w = key expires in n weeks
&amp;lt;n&amp;gt;m = key expires in n months
&amp;lt;n&amp;gt;y = key expires in n years
Key is valid for? (0) 0
Key does not expire at all
Is this correct? (y/N) Y
GnuPG needs to construct a user ID to identify your key.
Real name: Grzegorz Baranski
Email address: root@gbaranski.com
Comment:
You selected this USER-ID:
&amp;quot;Grzegorz Baranski &amp;lt;root@gbaranski.com&amp;gt;&amp;quot;
Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
gpg: key 2B0DFED5C9433443 marked as ultimately trusted
gpg: directory '/home/gbaranski/.gnupg/openpgp-revocs.d' created
gpg: revocation certificate stored as '/home/gbaranski/.gnupg/openpgp-revocs.d/226CDFD0B2C81A32E2C3DBEF2B0DFED5C9433443.rev'
public and secret key created and signed.
pub rsa4096 2021-05-17 [C]
226CDFD0B2C81A32E2C3DBEF2B0DFED5C9433443
uid Grzegorz Baranski &amp;lt;root@gbaranski.com&amp;gt;
&lt;/code>&lt;/pre>&lt;p>In this example &lt;a href="mailto:root@gbaranski.com">root@gbaranski.com&lt;/a> will used as GPG Key ID identifier, of course replace it with your own email when setting it up, but if you have few GPG Key IDs with the same email, check your GPG Key ID by using &lt;code>gpg --list-secret-keys --keyid-format 0xLONG&lt;/code> and then use it instead email.&lt;/p>
&lt;p>Check if the keypair has been properly created&lt;/p>
&lt;pre>&lt;code class="language-none" data-lang="none">$ gpg --list-secret-key --keyid-format 0xLONG root@gbaranski.com
sec rsa4096/0x2B0DFED5C9433443 2021-05-17 [C]
226CDFD0B2C81A32E2C3DBEF2B0DFED5C9433443
uid [ultimate] Grzegorz Baranski &amp;lt;root@gbaranski.com&amp;gt;
ssb rsa4096/0x1EF8CFF39BDF9EB4 2021-05-17 [E]
&lt;/code>&lt;/pre>&lt;h3 id="backing-up-primary-secret-key">Backing up primary secret key&lt;/h3>
&lt;p>Copy &lt;code>~/.gnupg&lt;/code> to some safe place, such as USB Stick. In my example it will be at &lt;code>/media/usb/gnupg&lt;/code>, if mounting it there is not possible, you can use soft links to accomplish this.&lt;/p>
&lt;p>Remove key from computer since it&amp;rsquo;s safely stored&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ gpg --delete-key root@gbaranski.com
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="gpg-sub-key">GPG Sub Key&lt;/h2>
&lt;p>The only usage of GPG Sub Key will be encoding, so disallow &amp;ldquo;Sign&amp;rdquo; which is allowed by default.&lt;/p>
&lt;p>Generate new GPG Sub Key&lt;/p>
&lt;pre>&lt;code class="language-none" data-lang="none">$ gpg --homedir /media/usb/gnupg --expert --edit-key root@gbaranski.com
gpg (GnuPG) 2.2.27; Copyright (C) 2021 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Secret key is available.
sec rsa4096/2B0DFED5C9433443
created: 2021-05-17 expires: never usage: C
trust: ultimate validity: ultimate
[ultimate] (1). Grzegorz Baranski &amp;lt;root@gbaranski.com&amp;gt;
gpg&amp;gt; addkey
Please select what kind of key you want:
(3) DSA (sign only)
(4) RSA (sign only)
(5) Elgamal (encrypt only)
(6) RSA (encrypt only)
(7) DSA (set your own capabilities)
(8) RSA (set your own capabilities)
(10) ECC (sign only)
(11) ECC (set your own capabilities)
(12) ECC (encrypt only)
(13) Existing key
(14) Existing key from card
Your selection? 8
Possible actions for a RSA key: Sign Encrypt Authenticate
Current allowed actions: Sign Encrypt
(S) Toggle the sign capability
(E) Toggle the encrypt capability
(A) Toggle the authenticate capability
(Q) Finished
Your selection? S
Possible actions for a RSA key: Sign Encrypt Authenticate
Current allowed actions: Encrypt
(S) Toggle the sign capability
(E) Toggle the encrypt capability
(A) Toggle the authenticate capability
(Q) Finished
Your selection? Q
RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (3072) 4096
Requested keysize is 4096 bits
Please specify how long the key should be valid.
0 = key does not expire
&amp;lt;n&amp;gt; = key expires in n days
&amp;lt;n&amp;gt;w = key expires in n weeks
&amp;lt;n&amp;gt;m = key expires in n months
&amp;lt;n&amp;gt;y = key expires in n years
Key is valid for? (0)
Key does not expire at all
Is this correct? (y/N) Y
Really create? (y/N) Y
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
sec rsa4096/2B0DFED5C9433443
created: 2021-05-17 expires: never usage: C
trust: ultimate validity: ultimate
ssb rsa4096/1EF8CFF39BDF9EB4
created: 2021-05-17 expires: never usage: E
[ultimate] (1). Grzegorz Baranski &amp;lt;root@gbaranski.com&amp;gt;
gpg&amp;gt; save
&lt;/code>&lt;/pre>&lt;h3 id="veryfing-generated-sub-key">Veryfing generated sub-key&lt;/h3>
&lt;h4 id="check-whether-sub-key-exists-in-keys-list">Check whether sub-key exists in keys list&lt;/h4>
&lt;pre>&lt;code class="language-none" data-lang="none">$ gpg --homedir /media/usb/gnupg --expert --list-keys --keyid-format 0xLONG
/media/usb/gnupg/pubring.kbx
----------------------------
pub rsa4096/0x2B0DFED5C9433443 2021-05-17 [C]
226CDFD0B2C81A32E2C3DBEF2B0DFED5C9433443
uid [ultimate] Grzegorz Baranski &amp;lt;root@gbaranski.com&amp;gt;
sub rsa4096/0x1EF8CFF39BDF9EB4 2021-05-17 [E]
&lt;/code>&lt;/pre>&lt;p>Sub-key has been created with Key ID &lt;code>0x1EF8CFF39BDF9EB4&lt;/code>, copy this ID, we will need it in the next step&lt;/p>
&lt;h5 id="check-if-encryptingdecrypting-works-properly">Check if encrypting/decrypting works properly&lt;/h5>
&lt;pre>&lt;code class="language-none" data-lang="none">$ echo &amp;quot;hello there!&amp;quot; | gpg --homedir /media/usb/gnupg --recipient root@gbaranski.com --encrypt | gpg --homedir /media/usb/gnupg --decrypt
gpg: encrypted with 4096-bit RSA key, ID 1EF8CFF39BDF9EB4, created 2021-05-17
&amp;quot;Grzegorz Baranski &amp;lt;root@gbaranski.com&amp;gt;&amp;quot;
hello there!
&lt;/code>&lt;/pre>&lt;h3 id="exporting-from-store">Exporting from store&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ gpg --homedir /media/usb/gnupg --output /tmp/gpg-subkey --export-secret-subkeys root@gbaranski.com! SUB_KEY_ID!
$ gpg --homedir /media/usb/gnupg --export-ownertrust &amp;gt; /tmp/gpg-ownertrust
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Replace SUB_KEY_ID with ID copied from previous step, dont forget exclamation mark&lt;/strong>&lt;/p>
&lt;p>&lt;em>Example with &lt;code>0x1EF8CFF39BDF9EB4&lt;/code> as SUB_KEY_ID&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ gpg --homedir /media/usb/gnupg --output /tmp/gpg-subkey --export-secret-subkeys root@gbaranski.com! 0x1EF8CFF39BDF9EB4!
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="importing-on-the-same-pc">Importing on the same PC&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ gpg --import /tmp/gpg-subkey
$ gpg --import-ownertrust /tmp/gpg-ownertrust
$ rm /tmp/gpg-subkey
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Verify that &lt;code>gpg -K&lt;/code> shows &lt;code>sec#&lt;/code> instead of just &lt;code>sec&lt;/code> for primary key.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ gpg -K
/home/gbaranski/.gnupg/pubring.kbx
----------------------------------
sec# rsa4096 2021-05-17 &lt;span style="color:#f92672">[&lt;/span>C&lt;span style="color:#f92672">]&lt;/span>
226CDFD0B2C81A32E2C3DBEF2B0DFED5C9433443
uid &lt;span style="color:#f92672">[&lt;/span>ultimate&lt;span style="color:#f92672">]&lt;/span> Grzegorz Baranski &amp;lt;root@gbaranski.com&amp;gt;
ssb rsa4096 2021-05-17 &lt;span style="color:#f92672">[&lt;/span>E&lt;span style="color:#f92672">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Integrate gopass with previously created Github repository&lt;/p>
&lt;pre>&lt;code class="language-none" data-lang="none">$ gopass setup
__ _ _ _ _ _ ___ ___
/'_ '\ /'_'\ ( '_'\ /'_' )/',__)/',__)
( (_) |( (_) )| (_) )( (_| |\__, \\__, \
'\__ |'\___/'| ,__/''\__,_)(____/(____/
( )_) | | |
\___/' (_)
🌟 Welcome to gopass!
🌟 Initializing a new password store ...
🌟 Configuring your password store ...
🎮 Please select a private key for encrypting secrets:
[0] gpg - 0x2B0DFED5C9433443 - Grzegorz Baranski &amp;lt;root@gbaranski.com&amp;gt;
Please enter the number of a key (0-0, [q]uit) (q to abort) [0]:
Please enter an email address for password store git config []: root@gbaranski.com
❓ Do you want to add a git remote? [y/N/q]: Y
Configuring the git remote ...
Please enter the git remote for your shared store []: git@github.com:gbaranski/pass.git
✅ Configured
&lt;/code>&lt;/pre>&lt;p>Add example password to store using &lt;code>gopass create&lt;/code>&lt;/p>
&lt;pre>&lt;code class="language-none" data-lang="none">$ gopass create
🌟 Welcome to the secret creation wizard (gopass create)!
🧪 Hint: Use 'gopass edit -c' for more control!
[ 0] Website Login
[ 1] PIN Code (numerical)
[ 2] Generic
Please select the type of secret you would like to create (q to abort) [0]:
0
🧪 Creating Website login
[1] URL []: login.gbaranski.com
[2] Login []: gbaranski
[3] Generate Password? [Y/n/q]: n
Enter password for gbaranski:
Retype password for gbaranski:
[4] Comments []:
✅ Credentials saved to &amp;quot;websites/login.gbaranski.com/gbaranski&amp;quot;
&lt;/code>&lt;/pre>&lt;p>View newly added password using &lt;code>gopass show&lt;/code>&lt;/p>
&lt;pre>&lt;code class="language-none" data-lang="none">$ gopass show websites/login.gbaranski.com/gbaranski
Secret: websites/login.gbaranski.com/gbaranski
my-password
comment:
url: login.gbaranski.com
username: gbaranski
&lt;/code>&lt;/pre>&lt;h3 id="importing-on-remote-pc">Importing on remote PC&lt;/h3>
&lt;p>Use some file-transfer program e.g &lt;a href="https://github.com/schollz/croc">&lt;code>croc&lt;/code>&lt;/a>.&lt;/p>
&lt;p>Send keys from PC-A to PC-B&lt;/p>
&lt;p>On PC-A&lt;/p>
&lt;pre>&lt;code class="language-none" data-lang="none">$ croc send /tmp/gpg-subkey /tmp/gpg-ownertrust
Sending 2 files (3.7 kB)
Code is: 0560-mile-mercury-deliver
On the other computer run
croc 0560-mile-mercury-deliver
Sending (-&amp;gt;[fe80::86bd:8740:e58d:993b%wlan0]:42712)
gpg-subkey 100% |████████████████████| (3.5/3.5 kB, 1.931 MB/s) 1/2
gpg-ownertrust 100% |████████████████████| (167/167 B, 245.872 kB/s) 2/2
&lt;/code>&lt;/pre>&lt;p>On PC-B&lt;/p>
&lt;pre>&lt;code class="language-none" data-lang="none">$ croc --out /tmp 0560-mile-mercury-deliver
Accept 2 files (3.7 kB)? (y/n) y
Receiving (&amp;lt;-[fe80::6db:47aa:c755:f345%enp3s0]:9009)
gpg-subkey 100% |████████████████████| (3.5/3.5 kB, 512.473 kB/s) 1/2
gpg-ownertrust 100% |████████████████████| (167/167 B, 25.553 kB/s) 2/2
&lt;/code>&lt;/pre>&lt;p>Continue with &lt;a href="#importing-on-the-same-pc">Importing on the same PC&lt;/a>&lt;/p>
&lt;h4 id="importing-on-android">Importing on Android&lt;/h4>
&lt;p>Send keys to Android using &lt;a href="https://github.com/schollz/croc">&lt;code>croc&lt;/code>&lt;/a>&lt;/p>
&lt;pre>&lt;code class="language-none" data-lang="none">$ croc send /tmp/gpg-subkey
Sending 'gpg-subkey' (3.5 kB)
Code is: 3343-system-book-sinatra
On the other computer run
croc 3343-system-book-sinatra
Sending (-&amp;gt;192.168.1.214:37712)
100% |████████████████████| (3.5/3.5 kB, 4.728 MB/s)
&lt;/code>&lt;/pre>&lt;p>Receive them on Android using &lt;a href="https://f-droid.org/en/packages/com.github.howeyc.crocgui/">Croc Android&lt;/a>&lt;/p>
&lt;p>To import PGP Key on Android, use OpenKeychain app, available in &lt;a href="https://f-droid.org/en/packages/org.sufficientlysecure.keychain/">&lt;code>F-Droid&lt;/code>&lt;/a>.
Import gpg-subkey by selecting  and then &amp;ldquo;Import from File&amp;rdquo;.&lt;/p>
&lt;p>Open &lt;a href="https://github.com/android-password-store/Android-Password-Store">Android-Password-Store&lt;/a>, clone repository from Github and view your passwords.&lt;/p>
&lt;h1 id="conclusions">Conclusions&lt;/h1>
&lt;p>gopass is awesome password manager for people who like using things in terminal, for me setting up GPG keys correctly was the hardest thing.&lt;/p>
&lt;p>I hope this article was useful and saved you some time. 👋&lt;/p></content></item><item><title>About</title><link>/about/</link><pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate><guid>/about/</guid><description>About me High school student. Open-source enthusiast, full stack experience with different kind of applications, my Github Profile.
Contact Github: gbaranski
Email: root@gbaranski.com</description><content>&lt;h1 id="about-me">About me&lt;/h1>
&lt;p>High school student. Open-source enthusiast, full stack experience with different kind of applications, my &lt;a href="https://github.com/gbaranski">Github Profile&lt;/a>.&lt;/p>
&lt;h1 id="contact">Contact&lt;/h1>
&lt;p>Github: &lt;a href="https://github.com/gbaranski">gbaranski&lt;/a>&lt;/p>
&lt;p>Email: &lt;a href="mailto:root@gbaranski.com">root@gbaranski.com&lt;/a>&lt;/p></content></item><item><title>Creating ncurses-like TUI Applications in Rust using Cursive</title><link>/posts/rust-tui/</link><pubDate>Wed, 12 May 2021 00:00:00 +0000</pubDate><guid>/posts/rust-tui/</guid><description>Introduction A post describing creating a TUI application in Rust for the Houseflow project. It enables triggering events, like turning on lights, on connected IoT devices.
Goal The goal of this project is to create something similar to ncspot, a Spotify client in CLI that uses the cursive.
Getting started The first step is to initialize an empty project
cargo new --bin rust-blog-tui This will create a directory with the given name and few files inside.</description><content>
&lt;p>
&lt;img src="/img/rust-tui/cover.png"
&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>A post describing creating a TUI application in Rust for the &lt;a href="/projects/#houseflow">Houseflow&lt;/a> project.
It enables triggering events, like turning on lights, on connected IoT devices.&lt;/p>
&lt;h2 id="goal">Goal&lt;/h2>
&lt;p>The goal of this project is to create something similar to &lt;a href="https://github.com/hrkfdn/ncspot">&lt;code>ncspot&lt;/code>&lt;/a>, a Spotify client in CLI that uses the &lt;a href="https://github.com/gyscos/cursive">&lt;code>cursive&lt;/code>&lt;/a>.&lt;/p>
&lt;p>&lt;img src="/img/ncspot-screenshot.png" alt="screenshot of running ncspot">&lt;/p>
&lt;h2 id="getting-started">Getting started&lt;/h2>
&lt;p>The first step is to initialize an empty project&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">cargo new --bin rust-blog-tui
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will create a directory with the given name and few files inside. Let&amp;rsquo;s start by adding &lt;a href="https://github.com/gyscos/cursive">&lt;code>cursive&lt;/code>&lt;/a> crate to dependencies, &lt;a href="#why-cursive">here is why I chose it&lt;/a>, and also &lt;a href="https://github.com/dtolnay/anyhow">&lt;code>anyhow&lt;/code>&lt;/a> for easier error handling. That&amp;rsquo;s how our &lt;code>Cargo.toml&lt;/code> shoud look like:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">&lt;span style="color:#75715e"># Cargo.toml&lt;/span>
[&lt;span style="color:#a6e22e">package&lt;/span>]
&lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;rust-blog-tui&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">version&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;0.1.0&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">edition&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;2018&amp;#34;&lt;/span>
[&lt;span style="color:#a6e22e">dependencies&lt;/span>]
&lt;span style="color:#a6e22e">cursive&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;0.16&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">anyhow&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;1.0&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="setting-up-ui">Setting up UI&lt;/h3>
&lt;p>The first step is showing a simple UI in our &lt;code>main&lt;/code> function inside &lt;code>src/main.rs&lt;/code> file&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#75715e">// src/main.rs
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">use&lt;/span> cursive::views::{Dialog, TextView};
&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() -&amp;gt; &lt;span style="color:#a6e22e">anyhow&lt;/span>::Result&lt;span style="color:#f92672">&amp;lt;&lt;/span>()&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;span style="color:#75715e">// Creates the cursive root - required for every application.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> siv &lt;span style="color:#f92672">=&lt;/span> cursive::default();
&lt;span style="color:#75715e">// Creates a dialog with a single &amp;#34;Quit&amp;#34; button
&lt;/span>&lt;span style="color:#75715e">&lt;/span> siv.add_layer(Dialog::around(TextView::new(&lt;span style="color:#e6db74">&amp;#34;Hello Dialog!&amp;#34;&lt;/span>))
.title(&lt;span style="color:#e6db74">&amp;#34;Cursive&amp;#34;&lt;/span>)
.button(&lt;span style="color:#e6db74">&amp;#34;Quit&amp;#34;&lt;/span>, &lt;span style="color:#f92672">|&lt;/span>s&lt;span style="color:#f92672">|&lt;/span> s.quit()));
&lt;span style="color:#75715e">// Starts the event loop.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> siv.run();
Ok(())
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice the return type of the &lt;code>main&lt;/code> function. We&amp;rsquo;re using &lt;code>Result&lt;/code> from the &lt;code>anyhow&lt;/code> crate, which will allow us to return &lt;code>anyhow::Error&lt;/code> directly from the &lt;code>main&lt;/code> function.&lt;/p>
&lt;p>We can now test if it works by running&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">cargo run
&lt;/code>&lt;/pre>&lt;/div>&lt;p>What we should see is a screen with a simple Dialog.&lt;/p>
&lt;p>&lt;img src="/img/rust-tui/basic.png" alt="screenshot of program with dialog on middle of the screen">&lt;/p>
&lt;h3 id="defining-types-for-device">Defining types for Device&lt;/h3>
&lt;p>Let&amp;rsquo;s define some types which we will use for storing devices in memory&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#75715e">// src/device.rs
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#e6db74">/// Used to identify the device
&lt;/span>&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#75715e">#[derive(Debug, Clone)]&lt;/span>
&lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">DeviceID&lt;/span> {
inner: [&lt;span style="color:#66d9ef">u8&lt;/span>; &lt;span style="color:#ae81ff">16&lt;/span>],
}
&lt;span style="color:#75715e">#[derive(Debug, Clone)]&lt;/span>
&lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Device&lt;/span> {
&lt;span style="color:#66d9ef">pub&lt;/span> id: &lt;span style="color:#a6e22e">DeviceID&lt;/span>,
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And use them inside &lt;code>main.rs&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#75715e">// src/main.rs
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">mod&lt;/span> device;
&lt;span style="color:#66d9ef">use&lt;/span> device::{Device, DeviceID};
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="generating-fake-devices">Generating fake devices&lt;/h3>
&lt;p>Since we&amp;rsquo;re not operating on real devices yet, we&amp;rsquo;ll generate fake devices. For the source of randomness, we&amp;rsquo;ll use &lt;a href="https://lib.rs/crates/rand">&lt;code>rand&lt;/code>&lt;/a>. Add the following line to our &lt;code>Cargo.toml&lt;/code> dependencies section&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">&lt;span style="color:#75715e"># Cargo.toml&lt;/span>
&lt;span style="color:#75715e"># ...&lt;/span>
[&lt;span style="color:#a6e22e">dependencies&lt;/span>]
&lt;span style="color:#a6e22e">rand&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;0.8&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># ...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="random-device-ids">Random Device IDs&lt;/h5>
&lt;p>To generate a DeviceID using &lt;code>rand&lt;/code>, we&amp;rsquo;ll need to implement a Distribution for it&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#75715e">// src/device.rs
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">use&lt;/span> rand::distributions;
&lt;span style="color:#66d9ef">impl&lt;/span> distributions::Distribution&lt;span style="color:#f92672">&amp;lt;&lt;/span>DeviceID&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> distributions::Standard {
&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">sample&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>R: &lt;span style="color:#a6e22e">rand&lt;/span>::Rng &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#f92672">?&lt;/span>Sized&lt;span style="color:#f92672">&amp;gt;&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self, rng: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">mut&lt;/span> R) -&amp;gt; &lt;span style="color:#a6e22e">DeviceID&lt;/span> {
DeviceID { inner: &lt;span style="color:#a6e22e">rng&lt;/span>.gen() }
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="iter-of-random-devices">Iter of random devices&lt;/h5>
&lt;p>Since we&amp;rsquo;ve got the function that generates random DeviceID, we can create a new function that returns an infinite Iterator of Devices with random DeviceID&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#75715e">// src/device.rs
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#e6db74">/// Creates a infinite Iterator of fake devices
&lt;/span>&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">get_devices&lt;/span>() -&amp;gt; &lt;span style="color:#a6e22e">impl&lt;/span> Iterator&lt;span style="color:#f92672">&amp;lt;&lt;/span>Item &lt;span style="color:#f92672">=&lt;/span> Device&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
std::iter::repeat_with(&lt;span style="color:#f92672">||&lt;/span> Device { id: &lt;span style="color:#a6e22e">rand&lt;/span>::random() })
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Import this function inside &lt;code>main.rs&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#75715e">// src/main.rs
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">use&lt;/span> device::{Device, DeviceID, get_devices};
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="displaying-a-list-of-devices-to-the-user">Displaying a list of devices to the user&lt;/h3>
&lt;p>To present &lt;code>DeviceID&lt;/code> to the user, we need to implement the &lt;code>std::fmt::Display&lt;/code> trait. We&amp;rsquo;re going to use the hex encoding of inner bytes so that we need to add the &lt;a href="https://lib.rs/crates/hex">&lt;code>hex&lt;/code>&lt;/a> crate. Let&amp;rsquo;s add it to our &lt;code>Cargo.toml&lt;/code>&amp;rsquo;s dependencies section.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">&lt;span style="color:#75715e"># Cargo.toml&lt;/span>
&lt;span style="color:#75715e"># ...&lt;/span>
[&lt;span style="color:#a6e22e">dependencies&lt;/span>]
&lt;span style="color:#a6e22e">hex&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;0.4&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># ...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And implementation of the &lt;code>std::fmt::Display&lt;/code> trait for the &lt;code>DeviceID&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#75715e">// src/device.rs
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">use&lt;/span> std::fmt;
&lt;span style="color:#66d9ef">impl&lt;/span> fmt::Display &lt;span style="color:#66d9ef">for&lt;/span> DeviceID {
&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self, f: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">mut&lt;/span> fmt::Formatter&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">&amp;#39;_&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>) -&amp;gt; &lt;span style="color:#a6e22e">fmt&lt;/span>::Result {
write&lt;span style="color:#f92672">!&lt;/span>(f, &lt;span style="color:#e6db74">&amp;#34;{}&amp;#34;&lt;/span>, hex::encode(self.inner))
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="selectview">SelectView&lt;/h5>
&lt;p>To display a list of the devices on which we can click, we use &lt;a href="https://docs.rs/cursive/0.16.3/cursive/views/struct.SelectView.html">&lt;code>SelectView&lt;/code>&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#75715e">// src/main.rs
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">use&lt;/span> cursive::{views::SelectView, Cursive, View};
&lt;span style="color:#e6db74">/// Returns SelectView whichs shows all available devices to the user
&lt;/span>&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">get_devices_select_view&lt;/span>(
devices: Vec&lt;span style="color:#f92672">&amp;lt;&lt;/span>Device&lt;span style="color:#f92672">&amp;gt;&lt;/span>,
submit_callback: &lt;span style="color:#a6e22e">impl&lt;/span> &amp;#39;static &lt;span style="color:#f92672">+&lt;/span> Fn(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> Cursive, Device),
) -&amp;gt; &lt;span style="color:#a6e22e">impl&lt;/span> View {
&lt;span style="color:#66d9ef">let&lt;/span> devices_cursive_iter &lt;span style="color:#f92672">=&lt;/span> devices
.iter()
.enumerate()
.map(&lt;span style="color:#f92672">|&lt;/span>(index, device)&lt;span style="color:#f92672">|&lt;/span> (device.id.to_string(), index));
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> view &lt;span style="color:#f92672">=&lt;/span> SelectView::new();
view.add_all(devices_cursive_iter);
view.set_on_submit(&lt;span style="color:#66d9ef">move&lt;/span> &lt;span style="color:#f92672">|&lt;/span>siv, index&lt;span style="color:#f92672">|&lt;/span> {
&lt;span style="color:#66d9ef">let&lt;/span> device &lt;span style="color:#f92672">=&lt;/span> devices.get(&lt;span style="color:#f92672">*&lt;/span>index).unwrap();
submit_callback(siv, device.clone())
});
view
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And now show it to the user in &lt;code>main&lt;/code> function&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#75715e">// src/main.rs
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() -&amp;gt; &lt;span style="color:#a6e22e">anyhow&lt;/span>::Result&lt;span style="color:#f92672">&amp;lt;&lt;/span>()&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;span style="color:#75715e">// Creates the cursive root - required for every application.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> siv &lt;span style="color:#f92672">=&lt;/span> cursive::default();
&lt;span style="color:#66d9ef">let&lt;/span> devices &lt;span style="color:#f92672">=&lt;/span> get_devices().take(&lt;span style="color:#ae81ff">10&lt;/span>).collect();
&lt;span style="color:#66d9ef">let&lt;/span> devices_select_view &lt;span style="color:#f92672">=&lt;/span> get_devices_select_view(devices, &lt;span style="color:#f92672">|&lt;/span>siv, _device&lt;span style="color:#f92672">|&lt;/span> siv.quit());
&lt;span style="color:#75715e">// Create a dialog with devices select view
&lt;/span>&lt;span style="color:#75715e">&lt;/span> siv.add_layer(Dialog::around(devices_select_view));
&lt;span style="color:#75715e">// Starts the event loop.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> siv.run();
Ok(())
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The result is&lt;/p>
&lt;p>&lt;img src="/img/rust-tui/selectview.png" alt="screenshot of program with selectview">&lt;/p>
&lt;p>So far so good.&lt;/p>
&lt;h4 id="showing-a-dialog-to-the-user-on-submit-callback">Showing a dialog to the user on submit callback&lt;/h4>
&lt;p>Currently, selecting a particular device closes the program. We fix it by displaying a Dialog with the available options for the specific device.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#75715e">// src/main.rs
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">submit_callback&lt;/span>(siv: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">mut&lt;/span> Cursive, device: &lt;span style="color:#a6e22e">Device&lt;/span>) {
&lt;span style="color:#66d9ef">let&lt;/span> text_view &lt;span style="color:#f92672">=&lt;/span> TextView::new(&lt;span style="color:#e6db74">&amp;#34;Select what to do with the device&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">let&lt;/span> dialog_title &lt;span style="color:#f92672">=&lt;/span> format&lt;span style="color:#f92672">!&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Selected device: {}&amp;#34;&lt;/span>, device.id);
&lt;span style="color:#66d9ef">let&lt;/span> dialog &lt;span style="color:#f92672">=&lt;/span> Dialog::around(text_view)
.title(dialog_title)
.button(&lt;span style="color:#e6db74">&amp;#34;Send Command&amp;#34;&lt;/span>, &lt;span style="color:#f92672">|&lt;/span>siv&lt;span style="color:#f92672">|&lt;/span> siv.quit())
.button(&lt;span style="color:#e6db74">&amp;#34;Cancel&amp;#34;&lt;/span>, &lt;span style="color:#f92672">|&lt;/span>siv&lt;span style="color:#f92672">|&lt;/span> {
siv.pop_layer();
});
siv.add_layer(dialog);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And use it in the &lt;code>main&lt;/code> function&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#75715e">// src/main.rs
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() -&amp;gt; &lt;span style="color:#a6e22e">anyhow&lt;/span>::Result&lt;span style="color:#f92672">&amp;lt;&lt;/span>()&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;span style="color:#75715e">// Creates the cursive root - required for every application.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> siv &lt;span style="color:#f92672">=&lt;/span> cursive::default();
&lt;span style="color:#66d9ef">let&lt;/span> devices &lt;span style="color:#f92672">=&lt;/span> get_devices().take(&lt;span style="color:#ae81ff">10&lt;/span>).collect();
&lt;span style="color:#66d9ef">let&lt;/span> devices_select_view &lt;span style="color:#f92672">=&lt;/span> get_devices_select_view(devices, submit_callback);
&lt;span style="color:#75715e">// Create a dialog with devices select view
&lt;/span>&lt;span style="color:#75715e">&lt;/span> siv.add_layer(Dialog::around(devices_select_view));
&lt;span style="color:#75715e">// Starts the event loop.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> siv.run();
Ok(())
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we can select a specific device, and the dialog shows up&lt;/p>
&lt;p>&lt;img src="/img/rust-tui/dialog-popup.png" alt="screenshot of program with selectview with dialog">&lt;/p>
&lt;h4 id="sending-http-request-with-send-command-button">Sending HTTP request with Send Command button&lt;/h4>
&lt;p>Right now, the &amp;ldquo;Send Command&amp;rdquo; button closes our program. To fix that, we add a sending HTTP Request function. We start with adding the &lt;a href="https://lib.rs/crates/reqwest">&lt;code>reqwest&lt;/code>&lt;/a> and the &lt;a href="https://lib.rs/crates/cursive-async-view">&lt;code>cursive-async-view&lt;/code>&lt;/a> libraries for displaying a loader.&lt;/p>
&lt;p>Add them to the dependencies section in our &lt;code>Cargo.toml&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">&lt;span style="color:#75715e"># Cargo.toml&lt;/span>
&lt;span style="color:#75715e"># ...&lt;/span>
[&lt;span style="color:#a6e22e">dependencies&lt;/span>]
&lt;span style="color:#a6e22e">cursive&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">-&lt;/span>&lt;span style="color:#a6e22e">async&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">-&lt;/span>&lt;span style="color:#a6e22e">view&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;0.5&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">reqwest&lt;/span> = { &lt;span style="color:#a6e22e">version&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;0.11&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">default&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">-&lt;/span>&lt;span style="color:#a6e22e">features&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>, &lt;span style="color:#a6e22e">features&lt;/span> = [ &lt;span style="color:#e6db74">&amp;#34;blocking&amp;#34;&lt;/span> ] }
&lt;span style="color:#75715e"># ...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Add a function that will be called on the &amp;ldquo;Send Command&amp;rdquo; button press&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#75715e">// src/main.rs
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">use&lt;/span> cursive_async_view::AsyncView;
&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">send_command&lt;/span>(siv: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">mut&lt;/span> Cursive, _device: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Device&lt;/span>) {
&lt;span style="color:#66d9ef">let&lt;/span> client &lt;span style="color:#f92672">=&lt;/span> reqwest::blocking::Client::new();
&lt;span style="color:#66d9ef">let&lt;/span> request &lt;span style="color:#f92672">=&lt;/span> client.post(&lt;span style="color:#e6db74">&amp;#34;http://httpbin.org/delay/1&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">let&lt;/span> async_view &lt;span style="color:#f92672">=&lt;/span> AsyncView::new_with_bg_creator(
siv,
&lt;span style="color:#66d9ef">move&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#66d9ef">match&lt;/span> request.send() {
Ok(response) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> Ok(response.status().to_string()),
Err(err) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> Err(err.to_string()),
},
TextView::new,
);
&lt;span style="color:#66d9ef">let&lt;/span> async_view_width &lt;span style="color:#f92672">=&lt;/span> siv.screen_size().x &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>;
&lt;span style="color:#66d9ef">let&lt;/span> async_view &lt;span style="color:#f92672">=&lt;/span> Dialog::around(async_view.with_width(async_view_width)).button(&lt;span style="color:#e6db74">&amp;#34;Ok&amp;#34;&lt;/span>, &lt;span style="color:#f92672">|&lt;/span>siv&lt;span style="color:#f92672">|&lt;/span> {
siv.pop_layer();
});
siv.add_layer(async_view);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Update the &lt;code>submit_callback&lt;/code> to call that function&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#75715e">// src/main.rs
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">submit_callback&lt;/span>(siv: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">mut&lt;/span> Cursive, device: &lt;span style="color:#a6e22e">Device&lt;/span>) {
&lt;span style="color:#66d9ef">let&lt;/span> text_view &lt;span style="color:#f92672">=&lt;/span> TextView::new(&lt;span style="color:#e6db74">&amp;#34;Select what to do with the device&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">let&lt;/span> dialog_title &lt;span style="color:#f92672">=&lt;/span> format&lt;span style="color:#f92672">!&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Selected device: {}&amp;#34;&lt;/span>, device.id);
&lt;span style="color:#66d9ef">let&lt;/span> dialog &lt;span style="color:#f92672">=&lt;/span> Dialog::around(text_view)
.title(dialog_title)
.button(&lt;span style="color:#e6db74">&amp;#34;Send Command&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">move&lt;/span> &lt;span style="color:#f92672">|&lt;/span>siv&lt;span style="color:#f92672">|&lt;/span> send_command(siv, &lt;span style="color:#f92672">&amp;amp;&lt;/span>device))
.button(&lt;span style="color:#e6db74">&amp;#34;Cancel&amp;#34;&lt;/span>, &lt;span style="color:#f92672">|&lt;/span>siv&lt;span style="color:#f92672">|&lt;/span> {
siv.pop_layer();
});
siv.add_layer(dialog);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="/img/rust-tui/send-http-request.gif" alt="gif of program sending http request">&lt;/p>
&lt;h2 id="fixing-the-movement">Fixing the movement&lt;/h2>
&lt;p>Currently, we need to use arrow keys for the navigation, which is quite inconvenient. Let&amp;rsquo;s add the h/j/k/l navigation——just like in Vim.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#75715e">// src/main.rs
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">use&lt;/span> cursive::{
event::EventResult,
views::{OnEventView, SelectView},
Cursive, View,
};
&lt;span style="color:#e6db74">/// Returns SelectView whichs shows all available devices to user
&lt;/span>&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">get_devices_select_view&lt;/span>(
devices: Vec&lt;span style="color:#f92672">&amp;lt;&lt;/span>Device&lt;span style="color:#f92672">&amp;gt;&lt;/span>,
submit_callback: &lt;span style="color:#a6e22e">impl&lt;/span> &amp;#39;static &lt;span style="color:#f92672">+&lt;/span> Fn(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> Cursive, Device),
) -&amp;gt; &lt;span style="color:#a6e22e">impl&lt;/span> View {
&lt;span style="color:#66d9ef">let&lt;/span> devices_cursive_iter &lt;span style="color:#f92672">=&lt;/span> devices
.iter()
.enumerate()
.map(&lt;span style="color:#f92672">|&lt;/span>(index, device)&lt;span style="color:#f92672">|&lt;/span> (device.id.to_string(), index));
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> view &lt;span style="color:#f92672">=&lt;/span> SelectView::new();
view.add_all(devices_cursive_iter);
view.set_on_submit(&lt;span style="color:#66d9ef">move&lt;/span> &lt;span style="color:#f92672">|&lt;/span>siv, index&lt;span style="color:#f92672">|&lt;/span> {
&lt;span style="color:#66d9ef">let&lt;/span> device &lt;span style="color:#f92672">=&lt;/span> devices.get(&lt;span style="color:#f92672">*&lt;/span>index).unwrap();
submit_callback(siv, device.clone())
});
OnEventView::new(view)
.on_pre_event_inner(&lt;span style="color:#e6db74">&amp;#39;k&amp;#39;&lt;/span>, &lt;span style="color:#f92672">|&lt;/span>siv, _&lt;span style="color:#f92672">|&lt;/span> {
&lt;span style="color:#66d9ef">let&lt;/span> cb &lt;span style="color:#f92672">=&lt;/span> siv.select_up(&lt;span style="color:#ae81ff">1&lt;/span>); &lt;span style="color:#75715e">// Move up
&lt;/span>&lt;span style="color:#75715e">&lt;/span> Some(EventResult::Consumed(Some(cb)))
})
.on_pre_event_inner(&lt;span style="color:#e6db74">&amp;#39;j&amp;#39;&lt;/span>, &lt;span style="color:#f92672">|&lt;/span>siv, _&lt;span style="color:#f92672">|&lt;/span> {
&lt;span style="color:#66d9ef">let&lt;/span> cb &lt;span style="color:#f92672">=&lt;/span> siv.select_down(&lt;span style="color:#ae81ff">1&lt;/span>); &lt;span style="color:#75715e">// Move down
&lt;/span>&lt;span style="color:#75715e">&lt;/span> Some(EventResult::Consumed(Some(cb)))
})
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Also inside the Dialogs&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#66d9ef">use&lt;/span> cursive::{
direction::{Absolute, Direction},
event::{Event, EventTrigger},
};
&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">submit_callback&lt;/span>(siv: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">mut&lt;/span> Cursive, device: &lt;span style="color:#a6e22e">Device&lt;/span>) {
&lt;span style="color:#66d9ef">let&lt;/span> text_view &lt;span style="color:#f92672">=&lt;/span> TextView::new(&lt;span style="color:#e6db74">&amp;#34;Select what to do with the device&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">let&lt;/span> dialog_title &lt;span style="color:#f92672">=&lt;/span> format&lt;span style="color:#f92672">!&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Selected device: {}&amp;#34;&lt;/span>, device.id);
&lt;span style="color:#66d9ef">let&lt;/span> dialog &lt;span style="color:#f92672">=&lt;/span> Dialog::around(text_view)
.title(dialog_title)
.button(&lt;span style="color:#e6db74">&amp;#34;Send Command&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">move&lt;/span> &lt;span style="color:#f92672">|&lt;/span>siv&lt;span style="color:#f92672">|&lt;/span> send_command(siv, &lt;span style="color:#f92672">&amp;amp;&lt;/span>device))
.button(&lt;span style="color:#e6db74">&amp;#34;Cancel&amp;#34;&lt;/span>, &lt;span style="color:#f92672">|&lt;/span>siv&lt;span style="color:#f92672">|&lt;/span> {
siv.pop_layer();
});
&lt;span style="color:#66d9ef">let&lt;/span> dialog &lt;span style="color:#f92672">=&lt;/span> OnEventView::new(dialog)
.on_pre_event_inner(
EventTrigger::none()
.or(Event::Char(&lt;span style="color:#e6db74">&amp;#39;h&amp;#39;&lt;/span>))
.or(Event::Char(&lt;span style="color:#e6db74">&amp;#39;k&amp;#39;&lt;/span>)),
&lt;span style="color:#f92672">|&lt;/span>siv, _&lt;span style="color:#f92672">|&lt;/span> {
siv.take_focus(Direction::Abs(Absolute::Left));
Some(EventResult::Consumed(None))
},
)
.on_pre_event_inner(
EventTrigger::none()
.or(Event::Char(&lt;span style="color:#e6db74">&amp;#39;l&amp;#39;&lt;/span>))
.or(Event::Char(&lt;span style="color:#e6db74">&amp;#39;j&amp;#39;&lt;/span>)),
&lt;span style="color:#f92672">|&lt;/span>siv, _&lt;span style="color:#f92672">|&lt;/span> {
siv.take_focus(Direction::Abs(Absolute::Right));
Some(EventResult::Consumed(None))
},
);
siv.add_layer(dialog);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The complete source code is available on the &lt;a href="https://github.com/gbaranski/houseflow/tree/881977b8606fe554c6dc5aed38d916ad7f0efab2/tui">Github repo&lt;/a> as a part of the &lt;a href="/projects#houseflow">Houseflow&lt;/a> project.&lt;/p>
&lt;h2 id="why-cursive">Why cursive?&lt;/h2>
&lt;p>I&amp;rsquo;ve chosen it over &lt;a href="https://github.com/fdehau/tui-rs">&lt;code>tui-rs&lt;/code>&lt;/a> because the &lt;code>cursive&lt;/code> provides a lot of nice built-in widgets and suits better to my use-case; you can check out the comparison made by &lt;code>cursive&lt;/code> &lt;a href="https://github.com/gyscos/cursive/wiki/Cursive-vs-tui%E2%80%90rs">here&lt;/a>.&lt;/p></content></item><item><title>Projects</title><link>/projects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/</guid><description>My projects All of them are available on my Github profile
Houseflow Home automation platform, the project in which I put the most effort. Started it at the very beginning of the programming journey. This project involves a lot of different topics, like networking, electronics, mobile and web development, databases, devops, etc.
Made using
Rust for high performance networking services with low memory footprint. My plan is to run that on cheap Raspberry Pi.</description><content>&lt;h1 id="my-projects">My projects&lt;/h1>
&lt;p>All of them are available on my &lt;a href="https://github.com/gbaranski">Github&lt;/a> profile&lt;/p>
&lt;h2 id="houseflow">Houseflow&lt;/h2>
&lt;p>Home automation platform, the project in which I put the most effort. Started it at the very beginning of the programming journey. This project involves a lot of different topics, like networking, electronics, mobile and web development, databases, devops, etc.&lt;/p>
&lt;p>Made using&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.rust-lang.org/">Rust&lt;/a> for high performance networking services with low memory footprint. My plan is to run that on cheap Raspberry Pi.&lt;/li>
&lt;li>&lt;a href="https://golang.org/">Go&lt;/a> for OAuth2 Server implementation for Google Smart Home Actions.&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/C_(programming_language)">C&lt;/a> for Embedded devices, including ESP8266.&lt;/li>
&lt;li>&lt;a href="https://www.postgresql.org/">PostgreSQL&lt;/a> as primary database for storing users and devices.&lt;/li>
&lt;/ul>
&lt;p>Previously also&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.typescriptlang.org/">Typescript&lt;/a> for Web application and backend&lt;/li>
&lt;li>&lt;a href="https://reactjs.org/">React&lt;/a> for Web application&lt;/li>
&lt;li>&lt;a href="https://flutter.dev/">Flutter&lt;/a> for mobile application&lt;/li>
&lt;li>&lt;a href="https://www.mongodb.com/">MongoDB&lt;/a> as primary database, abandoned because I wanted to learn more about relational databases&lt;/li>
&lt;li>&lt;a href="https://mqtt.org/">MQTT&lt;/a> as transport layer protocol between embedded devices and services.&lt;/li>
&lt;/ul>
&lt;h2 id="lightmq">LightMQ&lt;/h2>
&lt;p>Lightweight client-server messaging protocol. Intented to work for &lt;a href="#houseflow">Houseflow&lt;/a>, as a replacement to MQTT which don&amp;rsquo;t really fit into my use-case. Now work is continued under new name Lighthouse at &lt;a href="#houseflow">Houseflow&lt;/a>.&lt;/p>
&lt;p>Made using &lt;a href="https://golang.org/">Go&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://github.com/gbaranski/lightmq">Github Repository&lt;/a>&lt;/p>
&lt;h2 id="cryptogram">Cryptogram&lt;/h2>
&lt;p>Decentralized P2P messaging app. Allows real-time messaging without server.&lt;/p>
&lt;p>Made using &lt;a href="https://golang.org/">Go&lt;/a> and &lt;a href="https://libp2p.io/">LibP2P&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://github.com/gbaranski/cryptogram">Github Repository&lt;/a>&lt;/p>
&lt;h2 id="openflavour">OpenFlavour&lt;/h2>
&lt;p>My first steps in databases, scraping data from e-cig flavours manufacturers and providing service for &lt;a href="https://vapetool.app/">VapeTool&lt;/a>.&lt;/p>
&lt;p>Made using Typescript.&lt;/p>
&lt;p>&lt;a href="https://github.com/gbaranski/OpenFlavour-API">API Github Repository&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/gbaranski/OpenFlavour-Scraper">Scrapers Github Repository&lt;/a>&lt;/p></content></item></channel></rss>
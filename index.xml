<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>gbaranski's blog</title><link>/</link><description>Recent content on gbaranski's blog</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><copyright>Copyright Â© 2021, gbaranski</copyright><lastBuildDate>Mon, 17 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Comparison of password managers and my setup</title><link>/posts/password-managers/</link><pubDate>Mon, 17 May 2021 00:00:00 +0000</pubDate><guid>/posts/password-managers/</guid><description>Introduction For a long time I was looking for a password manager which would meet all the following requirements:
Open-source, CLI/TUI application must not be written in any scripting language. I don&amp;rsquo;t want slow startup time, I might use a password manager in scripts and 0.5s startup time is unacceptable. Android &amp;amp; Linux support, Option for self-hosting, Must be relatively easy to synchronize between multiple computers, must work on Linux and Android.</description></item><item><title>About</title><link>/about/</link><pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate><guid>/about/</guid><description>About me High school student. Full-stack experience with different kind of applications. The vast majority of my time I spend working on Houseflow.
Contact Github: gbaranski
Email: root@gbaranski.com
Matrix ID: @gbaranski:matrix.org
Keybase: gbaranski
PGP Public Key My public key can be downloaded from https://gbaranski.com/pgp-public-key.txt
pub rsa4096 2021-05-17 [C] 226C DFD0 B2C8 1A32 E2C3 DBEF 2B0D FED5 C943 3443 uid [ultimate] Grzegorz Baranski &amp;lt;root@gbaranski.com&amp;gt; sub rsa4096 2021-05-17 [E] sub rsa4096 2021-05-22 [SEA] [expires: 2022-05-22]</description></item><item><title>Creating ncurses-like TUI Applications in Rust using Cursive</title><link>/posts/rust-tui/</link><pubDate>Wed, 12 May 2021 00:00:00 +0000</pubDate><guid>/posts/rust-tui/</guid><description>Introduction A post describing creating a TUI application in Rust for the Houseflow project. It enables triggering events, like turning on lights, on connected IoT devices.
Goal The goal of this project is to create something similar to ncspot, a Spotify client in CLI that uses the cursive.
Getting started The first step is to initialize an empty project
cargo new --bin rust-blog-tui This will create a directory with the given name and few files inside.</description></item><item><title>Projects</title><link>/projects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/</guid><description>My projects All of them are available on my Github profile
Houseflow Home automation platform, the project in which I put the most effort. Started it at the very beginning of the programming journey. This project involves a lot of different topics, like networking, electronics, mobile and web development, databases, devops, etc.
Made using
Rust for high performance networking services with low memory footprint. My plan is to run that on cheap Raspberry Pi.</description></item></channel></rss>